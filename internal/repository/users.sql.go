// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserWithEmail = `-- name: CreateUserWithEmail :one
INSERT INTO users (email, password_hash, name)
VALUES ($1, $2, $3)
RETURNING id, email, name, created_at, updated_at
`

type CreateUserWithEmailParams struct {
	Email        string
	PasswordHash sql.NullString
	Name         sql.NullString
}

type CreateUserWithEmailRow struct {
	ID        uuid.UUID
	Email     string
	Name      sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUserWithEmail(ctx context.Context, arg CreateUserWithEmailParams) (CreateUserWithEmailRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithEmail, arg.Email, arg.PasswordHash, arg.Name)
	var i CreateUserWithEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserWithGoogle = `-- name: CreateUserWithGoogle :one
INSERT INTO users (google_id, email, name)
VALUES ($1, $2, $3)
RETURNING id, email, google_id, name
`

type CreateUserWithGoogleParams struct {
	GoogleID sql.NullString
	Email    string
	Name     sql.NullString
}

type CreateUserWithGoogleRow struct {
	ID       uuid.UUID
	Email    string
	GoogleID sql.NullString
	Name     sql.NullString
}

func (q *Queries) CreateUserWithGoogle(ctx context.Context, arg CreateUserWithGoogleParams) (CreateUserWithGoogleRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithGoogle, arg.GoogleID, arg.Email, arg.Name)
	var i CreateUserWithGoogleRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.GoogleID,
		&i.Name,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, google_id, name, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, email, google_id, name, created_at, updated_at
FROM users
WHERE google_id = $1
`

type GetUserByGoogleIDRow struct {
	ID        uuid.UUID
	Email     string
	GoogleID  sql.NullString
	Name      sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID sql.NullString) (GetUserByGoogleIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByGoogleID, googleID)
	var i GetUserByGoogleIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.GoogleID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2, updated_at = NOW()
WHERE email = $1
`

type UpdateUserPasswordParams struct {
	Email        string
	PasswordHash sql.NullString
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Email, arg.PasswordHash)
	return err
}
